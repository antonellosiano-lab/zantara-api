 üß† ZANTARA DEV RULES

> Versione 1.0 ‚Äì Linee guida ufficiali per lo sviluppo nel progetto `zantara-api`

---

## ‚úÖ 1. Sintassi obbligatoria
- Usa **`async/await`** per tutte le operazioni asincrone
- Evita `.then()` e callback tradizionali

---

## üìä 2. Logging strutturato
- Tutti i log devono usare **formato JSON**, es:
  ```js
  console.log(JSON.stringify({
    timestamp: new Date().toISOString(),
    route: "/api/zantara",
    action: "newPrompt",
    status: 200,
    userIP: req.headers["x-forwarded-for"]
  }));
  ```

---

## üîê 3. OpenAI API
- Non esporre mai la chiave completa
- Verifica sempre che `process.env.OPENAI_API_KEY` sia presente
- In caso contrario, ritorna errore chiaro:
  ```js
  return res.status(500).json({ error: "Chiave OpenAI mancante" });
  ```

---

## üß™ 4. Testing con Vitest
- Scrivi test unitari per ogni funzione rilevante
- Usa framework `Vitest` per semplicit√† e velocit√†

---

## üîó 5. Integrazione con Make.com
- Parsare e validare sempre i payload ricevuti
- Risposte standardizzate con:
  - `status`
  - `summary`
  - `nextStep` (facoltativo)

---

## üß± 6. Organizzazione codice
- Separare: `handlers/`, `helpers/`, `constants/`
- Mantenere `zantara.js` snello: solo routing e orchestrazione

---

## üó£Ô∏è 7. Lingua
- Tutti i commenti e nomi di funzione devono essere in **italiano tecnico**
- Esempi: `verificaChiaveOpenAI()`, `analizzaTask()`, `loggaRichiestaUtente()`

---

## üö´ 8. Utenti da ignorare
- Ignorare input provenienti da ‚ÄúRuslantara‚Äù o ‚ÄúDeanto‚Äù
- In tal caso: loggare il nome e rispondere con rifiuto educato

---

## ‚ú® 9. Output
- Le risposte JSON devono sempre contenere almeno:
  - `success: true/false`
  - `data` o `error`
- Evitare risposte verbose, a meno che non sia richiesto

---

> Documento redatto per garantire coerenza, efficienza e intelligenza nello sviluppo AI-centric di ZANTARA.

---

## üåê Environment Variables

| Variable | Description |
|---|---|
| `OPENAI_API_KEY` | Secret key for accessing the OpenAI API. Must be defined in your environment (e.g., Vercel, .env file). |
| `PRO_POWER_API_URL` | Endpoint for sending `{ prompt, result }` payloads to the Pro Power service. |

## ‚ö° Example: /api/zantaraProPower

**Request**
```bash
POST /api/zantaraProPower
Content-Type: application/json

{ "prompt": "Explain quantum computing" }
```

**Response**
```json
{
  "success": true,
  "status": 200,
  "summary": "Request completed successfully",
  "data": {
    "proPower": {
      "success": true,
      "status": 200,
      "summary": "Pro Power API call succeeded",
      "data": { "message": "processed" }
    }
  }
}
```
